---
title: "Supplement: A baseline method for nowcasting count data"
authors: "To be updated"
format: docx
editor: visual
date: 2025-04-16
bibliography: ref.bib
output:
  bookdown::docx:
    fig_caption: yes
---

# Supplemental methods

## Mathematical model

This model was initially developed as a reference model for the COVID-19 hospitalisations nowcast challenge in Germany in 2021 and 2022 @Wolffram2023. It uses preliminary case count and their delays in the form of reporting triangles, and uses empirical delay distributions to estimate yet-to-be-observed cases. Probabilistic nowcasts are generated using a negative binomial model with means from the point nowcast and dispersion parameters estimated from past nowcast errors. Below, we describe the mathematical details of each component of the model, starting with a definition of the notation used throughout.

### Notation

We denote $X_{t,d}, d = 0, .., D$ as the number of cases occurring on time $t$ which appear in the dataset with a delay of $d$. For example, a delay $d = 0$ means that a case occurring on day $t$ arrived in the dataset on day $t$, or on what is considered to be the first possible report date in practice. We only consider cases reporting within a maximum delay $D$. The number of cases reporting for time $t$ with a delay of at most $d$ can be written as:

$$X_{t, \le d} = \sum_{i=0}^d X_{t,i} $$

Such that $X_t = X_{t, \le D}$ is the “final” number of reported cases on time $t$. Conversely, for $d < D$

$$X_{t,>d} = \sum_{i = d+1} ^{D} X_{t,i}$$

is the number of cases still missing after $d$ delay. We refer to $X_t$ to describe a random variable, $x_t$ for the corresponding observation, and $\hat{x}_t$ for an estimated/imputed value. The matrix of $x_{t,d}$ available at a given time $t^*$ is referred to as a reporting matrix. In the case where all $t+d>t^*$ have yet to be observed (e.g. $t^*$ is the current time), this reporting matrix is referred to as the reporting triangle, with all values in the bottom right corner of the triangle being missing, except for the first entry at $x_{t=t*, d = 0}$.

|   | $d = 0$ | $d = 1$ | $d=2$ | $...$ | $d= D-1$ | $d= D$ |
|-----------|-----------|-----------|-----------|-----------|-----------|-----------|
| $t=1$ | $x_{1,0}$ | $x_{1,1}$ | $x_{1,2}$ | $...$ | $x_{1,D-1}$ | $x_{1, D}$ |
| $t=2$ | $x_{2,0}$ | $x_{2,1}$ | $x_{2,2}$ | $...$ | $x_{2,D-1}$ | $x_{2, D}$ |
| $t=3$ | $x_{3,0}$ | $x_{3,1}$ | $x_{3,2}$ | $...$ | $x_{3,D-1}$ | $x_{3, D}$ |
| $...$ | $...$ | $...$ | $...$ | $...$ | $...$ | $...$ |
| $t=t^*-1$ | $x_{t^*-1,0}$ | $x_{t^*-1,1}$ | $x_{t^*-1,,2}$ | $...$ | $x_{t^*-1,,D-1}$ | $x_{t^*-1,D}$ |
| $t=t^*$ | $x_{t^*,0}$ | $x_{t^*,1}$ | $x_{t^*,2}$ | $...$ | $x_{t^*,D-1}$ | $x_{t^*, D}$ |

### Delay distribution estimation

#### Estimate of the delay distribution from a reporting matrix

We can use a reporting matrix to compute an empirical estimate of the delay distribution, $\pi(d)$. The empirical delay distribution, $\pi(d)$ can be computed directly from the reporting matrix $X$

$$
\pi(d)= \frac{\sum_{t=1}^{t=t^*} X_{t,d}}{\sum_{d=0}^{D} \sum_{t=1}^{t=t^*} X_{t,d}}
$$

Where the numerator is the sum of all the observations across reference times $t$ for a particular delay $d$, and the denominator is the sum across all reference times $t$ and delays $d$.

#### Estimate of the delay distribution from a reporting triangle

In the case where we have missing values in the bottom right (i.e. we have a reporting triangle), we need to use the multiplicative model to generate a point nowcast matrix containing a mixture of observed and imputed values. Then we can compute the delay distribution as described above for the reporting matrix case.

The multiplicative model works by iteratively "filling in" the reporting triangle starting from the bottom left, and moving column by column from left to right until the bottom right of the triangle is filled in.

![Visual description of the iterative “completing” of the reporting triangle, moving from left to right and bottom to top. In this cases, we are imputing \$x\_{t=6, d = 2}\$ and \$x\_{t=5, d= 2}\$ assuming that the ratio between \$x\_{t=1:4, d = 2}\$ (block top), and \$x\_{t=1:4, d=0:1}\$ (block top left) holds for for \$x\_{t=5:6, d = 2}\$ (block bottom) and \$x\_{t=5:6, d = 0:1}\$ (block bottom left). In this example, \$\\hat{x}\_{t=6, d = 1}\$ has already been imputed using the same approach, and we treat it as known going forward. This process is repeated across the reporting triangle to estimate all values outlined in the dashed lines.](schematic_fig.png){#fig1}

The method requires at least one observation, at delay $d=0$ for the most recent reference time, located at the bottom left of the reporting triangle in Figure \@ref(fig1) above. This means that in practice, the reporting triangle must have at least the same number of rows as it does columns. The method assumes that the values at each delay $d$ for the recent times, $t$, will consist of the same proportion of the values previously reported for earlier times $t$. To fill in the missing values for each column $d$, we sum over the rectangle of completely observed reference times for all $d-1$ columns (block top left) and sum over the column of completely observed reference times for all of the entries in column $d$ (block left). The ratio of these two sums is assumed to be the same in the missing entries in column $d$, so we use the entries observed up to $d-1$ for each incomplete reference time (block bottom left), and scale by this ratio to get the missing entries in column $d$. This process is repeated for each delay from $d$ up to the maximum delay $D$. At each iteration an additional reference time entry is computed as the delay $d$ increases.

The delay distribution is then estimated from the filled in reporting matrix, using the same algorithm as described above for the case of the complete reporting matrix.

### Point nowcast generation

To "fill in" the reporting triangle from the delay distribution, we need to estimate the expected total number of eventual observed cases $\hat{x}_t$, for each reference time $t$. Let $z$ be the sum over all delays $d$ that have already been observed (up until $t^*-t$), such that $z =\sum_{d=1}^{d=t^*-t} x_{t,d}$ and $\delta$ be the cumulative sum of the delay distribution, $\pi(d)$ up until $d = t^*-t$ such that $\delta = \sum_{d=1}^{d=t^*-t} \pi(d)$. By assuming that $z \sim Bin(x_t, \delta)$ and $x_t \sim Unif(0, \inf)$, it can be shown (See [Zero-handling](#zero-handling-approximation) below) that the expected value of $x_t$, the total number of reported cases on reference time $t$, can be written as:

$$
E(x_t | z, \delta) = \hat{x}_t = \frac{z + 1 - \delta}{\delta}
$$

Then we can compute $\hat{x}_{t,d}$ directly using the $d$th element of $\pi(d)$

$$
\hat{x}_{t,d} = \pi(d) \times \hat{x}_t
$$

Where the number of reports at timepoint $t$ with delay $d$ is the product of the the expected total reports, $\hat{x}_t$ and the proportion expected at that particular delay $d$, $\pi(d)$.

### Uncertainty estimation

To estimate the uncertainty in the nowcasts, we use past nowcast errors and assume a negative binomial observation model.

#### Generation of retrospective reporting triangles

We describe a method which generates retrospective reporting triangles to replicate what would have been available as of time $t^*=s^*$, where $s^* = t^*-m$ for $m = 1, 2, ... M$ to generate $M$ retrospective reporting triangles.

To generate the set of $M$ reporting triangles, we simply remove the last $m$ rows of the existing reporting triangle (or reporting matrix), to generate $M$ truncated incomplete reporting matrices. The method uses each retrospective reporting triangle to re-estimate a delay distribution using the $N$ preceding rows of the reporting triangle before $s^*$, and recomputes a retrospective nowcast, for $M$ realizations of the retrospective reporting triangle (so $M$ different $s^*$ values).

#### Generation of retrospective point nowcast matrices

From the $M$ reporting triangles, we apply the method described above to estimate a delay distribution from a reporting triangle and generate a point nowcast for each reporting triangle, to generate $M$ point nowcasts.

#### Fit point nowcast matrices and observed values to a negative binomial observation model at each delay

We then take the list of point nowcast matrices, and the list of truncated incomplete reporting matrices (these do not necessarily contains NAs on the bottom right, the bottom right could be entirely or partially observed). For each delay $d$ we identify the overlapping set of matrix elements that were imputed retrospectively and matrix elements that had been observed as of the most recent time point.

For each delay $d = 1, ..., D$ we assume that the observed values, $X_{s^*-d, >d}$ follow a negative binomial observation model with a mean of $\hat{x}_{s^*-d}$:

$$
X_{s^*-d,>d} | \hat{x}_{s^*-d, >d}(s*) \sim NegBin(\mu = \hat{x}_{s^*-d} + 0.1, \phi = \phi_d)
$$

We add a small number (0.1) to the mean to avoid an ill-defined negative binomial. We note that to perform all these computations, data snapshots from at least $N + M$ past observations, or rows of the original reporting triangle (or matrix), are needed. This estimate of the uncertainty accounts for the empirical uncertainty in the point estimate of the delay distribution over time.

### Probabilistic nowcast generation

Using the dispersion parameters for each delay, $\phi(d),$ for $d = 1,...D$, we can generate probabilistic nowcast matrices by drawing samples from the negative binomial:

$$
X_{t,d} \sim NegBin(\mu = \hat{x}_{t,d}, \phi = \phi(d))
$$

### Nowcast creation

To generate nowcast vectors that represent the expected final number of cases at each reference time, we aggregate the reporting matrices $X_{t,d}$ which contain a mix of observed and imputed values. We refer to the sum across delays as $X_{t,>d}$, or $x_t$

$$
X_{t,>d} = x_t = \sum_{i = d+1} ^{D} X_{t,i}
$$

We can then used the probabilistic draws to compute any desired quantiles to summarize the outputs.

### Zero-handling approximation {#zero-handling-approximation}

\*\* To be filled in\*\*

## Additional figures

### German nowcast Hub validation

![Fig.S1 Validation of baseline nowcasting model using German COVID-19 data compared to revised KIT simple nowcast. A. Weekly nowcasts from our baseline model and the KIT simple nowcast revised model against eventually observed national values, coloured by model, with data available at nowcast date (dotted lines). Nowcasts are shown daily with a 14-day horizon. B. Overall performance comparison between models, with decomposed WIS (dispersion, overprediction, underprediction) displayed as stacked bar charts for direct comparison. Stratified by national and age group nowcasts. C. Performance over time, displaying daily mean WIS scores summarised across age strata and 28 horizon days, coloured by model. D. Performance by age group, showing WIS scores across different age groups on the x axis with grouped bars for both models and stacked components displaying the decomposition of scores. E. Mean reporting delay over time, visualised as multiple coloured lines representing each age group, with the national average shown as a thicker black line. F. Empirical coverage at 50% and 90% prediction intervals for each model.](../output/figs/supp/fig_hub_validation_vs_KIT_revised.png){#figs1}

![Fig.S2 Relative WIS by age group.](../output/figs/supp/rel_wis_by_age_group.png){#figs2}

![Fig.S3 Mean WIS by nowcast horizon for each model—same panel relative WIS by nowcast horizon.](../output/figs/supp/mean_wis_by_horizon_ag.png){#figs3}

![Fig.S4. Relative WIS by nowcast horizon](../output/figs/supp/rel_wis_by_horizon_ag.png){#figs4}

![Fig.S5 Empirical coverage at 50% and 90% prediction intervals](../output/figs/supp/bar_chart_cov_ag.png){#figs5}

![Fig.S6 Empirical coverage at 50% and 90% prediction intervals by horizon for each model.](../output/figs/supp/cov_by_horizon_ag.png){#figs6}

![Fig S7. Empirical coverage at 50% and 90% prediction intervals by age group for each model configuration.](../output/figs/supp/cov_by_age_group.png){#figs7}

### Model permutation study

![Fig S8. Absolute WIS by nowcast horizon for each model configuration. Colour by model configuration, decomposed by dispersion, overprediction, and underprediction.](../output/figs/supp/mp_wis_by_horizon.png){#figs8}

![Fig S9. Absolute WIS by age group for each model configuration. Colour by model configuration, decomposed by dispersion, overprediction, and underprediction.](../output/figs/supp/mp_wis_by_age_group.png){#figs9}

![Fig S10. Absolute WIS over time (by week) for each model configuration. Colour by model configuration, decomposed by dispersion, overprediction, and underprediction.](../output/figs/supp/mp_wis_by_nowcast_week.png){#figs10}

### Case study: UKHSA norovirus surveillance

![Fig S11. Absolute WIS over time (by week) for each model.](../output/figs/supp/wis_over_time_noro.png){#figs11}

![Fig S12. Absolute WIS by day of week for each model.](../output/figs/supp/wis_by_weekday.png)
![Fig S13. Empirical coverage at 50% and 90% prediction intervals for each model.](../output/figs/supp/noro_coverage.png){#figs13}
![Fig S14. Empirical coverage at 50% and 90% prediction intervals by day of week for each model.](../output/figs/supp/noro_cov_wday.png){#figs13}

## References
